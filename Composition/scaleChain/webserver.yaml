tosca_definitions_version: cloudify_dsl_1_2

imports:
  - http://172.60.0.4:8000/cloudify-types.yaml
  - http://172.60.0.4:8000/fabric-plugin.yaml
  - plugins/cloudify-openstack-plugin/plugin.yaml
  - plugins/cloudify-proxy-plugin/plugin.yaml

inputs:

  application_network_name:
    default: Tenant-a-APPnetwork
    type: string

  application_network_subnet_name:
    default: Tenant-a-APPnetwork-subnet
    type: string

  image_id:
    default: 'd869319e-165e-45d8-a9ea-afccb8d3959c' # agent  centos no cloud-init with dtach
    type: string

  flavor_id:
    default: '3'
    type: string

  agent_name:
    type: string
    default: root

  agent_password:
    type: string
    default: password

  private_key_name:
    type: string
    default:  /root/.ssh/agent_key.pem

  management_network_name:
     type: string
     default: cloudify-management-network

node_types:

  port_node_type:
     derived_from: cloudify.nodes.SoftwareComponent

node_templates:

# Create an Application Network

  application_network:
    type: cloudify.openstack.nodes.Network
    properties:
      resource_id: { get_input: application_network_name }
      use_external_resource : true 


  management_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: management_network_name }

# Create an Application VM

  webServer:
    type: cloudify.openstack.nodes.Server
    properties:
      install_agent: false
      server:
        image: { get_input: image_id }
        flavor: { get_input: flavor_id }
    interfaces:
      cloudify.interfaces.lifecycle:
       create:
         inputs:
           args:
             nics:
                - net-id: { get_attribute: [ management_network, external_id ] }
                - net-id: { get_attribute: [ application_network,  external_id ]  }

    relationships:
        - target: application_network
          type: cloudify.relationships.connected_to


  webServer1Setup:
    type: port_node_type
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/setWebServer.sh
            fabric_env:
               user: { get_input: agent_name }
               password: { get_input: agent_password }
    relationships:
        - target: webServer
          type: cloudify.relationships.contained_in
